{"version":3,"sources":["src\\functions.js","index.js"],"names":["createShader","createProgram","gl","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","error","getShaderInfoLog","vertexShader","fragmentShader","program","attachShader","linkProgram","validateProgram","getProgramParameter","VALIDATE_STATUS","getProgramInfoLog","canvas","initWebGL","document","getElementById","getContext","height","clientHeight","width","clientWidth","viewport","VERTEX_SHADER","vertex","FRAGMENT_SHADER","fragment","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","vertexArray","bufferData","Float32Array","STATIC_DRAW","positionAttribLocation","getAttribLocation","vertexAttribPointer","FLOAT","FALSE","BYTES_PER_ELEMENT","enableVertexAttribArray","colorAttribLocation","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","useProgram","drawArrays","TRIANGLES","length","addEventListener","e"],"mappings":"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","file":"triangle.778da6ed.map","sourceRoot":"..","sourcesContent":["export function createShader(gl, type, source) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    console.log('Error compiling shader!');\n    console.error('Shader error info: ', gl.getShaderInfoLog(shader));\n    return false;\n  }\n  return shader;\n}\n\nexport function createProgram(gl, vertexShader, fragmentShader) {\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n\n  gl.linkProgram(program);\n  gl.validateProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\n    console.error('Error validating program ', gl.getProgramInfoLog(program));\n    return false;\n  }\n  return program;\n}\n","import vertex from './shaders/vertexShader.glsl';\nimport fragment from './shaders/fragmentShader.glsl';\nimport { createProgram, createShader } from './src/functions';\n\nlet canvas;\nlet gl;\nlet program;\n\nfunction initWebGL() {\n  canvas = document.getElementById('canvas');\n  gl = canvas.getContext('webgl');\n  if (!gl) {\n    console.log('Your browser dosen\"t support webgl');\n  }\n\n  canvas.height = gl.canvas.clientHeight;\n  canvas.width = gl.canvas.clientWidth;\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n  const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertex);\n  const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragment);\n\n  program = createProgram(gl, vertexShader, fragmentShader);\n\n  const vertexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n\n  // prettier-ignore\n  const vertexArray = [\n    // X, Y, Z, R, G, B\n    0, 0.5, 0, 0.2, 1.5, 1,\n    -0.5, -0.5, 0, 0.2, 0.5, 1,\n    0.5, -0.5, 0, 0.2, 0.5, 1,\n\n    0, -0.5, 0.5, 1, 0, 0,\n    -0.5, 0.5, 0.5, 0, 0, 0,\n    0.5, 0.5, 0.5, 0, 0, 0,\n  ];\n\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexArray), gl.STATIC_DRAW);\n  const positionAttribLocation = gl.getAttribLocation(program, 'vertexPosition');\n  gl.vertexAttribPointer(\n    positionAttribLocation,\n    3,\n    gl.FLOAT,\n    gl.FALSE,\n    6 * Float32Array.BYTES_PER_ELEMENT,\n    0 * Float32Array.BYTES_PER_ELEMENT,\n  );\n  gl.enableVertexAttribArray(positionAttribLocation);\n\n  const colorAttribLocation = gl.getAttribLocation(program, 'vertexColor');\n  gl.vertexAttribPointer(\n    colorAttribLocation,\n    3,\n    gl.FLOAT,\n    gl.FALSE,\n    6 * Float32Array.BYTES_PER_ELEMENT,\n    3 * Float32Array.BYTES_PER_ELEMENT,\n  );\n  gl.enableVertexAttribArray(colorAttribLocation);\n\n  gl.clearColor(0.75, 0.9, 1.0, 1.0);\n  // eslint-disable-next-line\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.enable(gl.DEPTH_TEST);\n  gl.useProgram(program);\n  gl.drawArrays(gl.TRIANGLES, 0, vertexArray.length / 6);\n}\n\ndocument.addEventListener('DOMContentLoaded', (e) => {\n  initWebGL();\n});\n"]}
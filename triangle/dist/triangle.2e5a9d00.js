parcelRequire=function(e,r,n,t){function i(n,t){function o(e){return i(o.resolve(e))}function c(r){return e[n][1][r]||r}if(!r[n]){if(!e[n]){var l="function"==typeof parcelRequire&&parcelRequire;if(!t&&l)return l(n,!0);if(u)return u(n,!0);if(f&&"string"==typeof n)return f(n);var p=new Error("Cannot find module '"+n+"'");throw p.code="MODULE_NOT_FOUND",p}o.resolve=c;var a=r[n]=new i.Module(n);e[n][0].call(a.exports,o,a,a.exports,this)}return r[n].exports}function o(e){this.id=e,this.bundle=i,this.exports={}}var u="function"==typeof parcelRequire&&parcelRequire,f="function"==typeof require&&require;i.isParcelRequire=!0,i.Module=o,i.modules=e,i.cache=r,i.parent=u;for(var c=0;c<n.length;c++)i(n[c]);if(n.length){var l=i(n[n.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):t&&(this[t]=l)}return i}({6:[function(require,module,exports) {
module.exports="#define GLSLIFY 1\nattribute vec3 vertexPosition; \nattribute vec3 vertexColor;\n\nvarying vec3 fragmentColor;\n\nvoid main(){\n  fragmentColor = vertexColor;\n  gl_Position = vec4(vertexPosition, 1);\n}\n";
},{}],7:[function(require,module,exports) {
module.exports="precision mediump float;\n#define GLSLIFY 1\n\nvarying vec3 fragmentColor;\n\nvoid main(){\n  gl_FragColor = vec4(fragmentColor, 1.0);\n}";
},{}],8:[function(require,module,exports) {
"use strict";function r(r,e,a){var o=r.createShader(e);return r.shaderSource(o,a),r.compileShader(o),r.getShaderParameter(o,r.COMPILE_STATUS)?o:(console.log("Error compiling shader!"),console.error("Shader error info: ",r.getShaderInfoLog(o)),!1)}function e(r,e,a){var o=r.createProgram();return r.attachShader(o,e),r.attachShader(o,a),r.linkProgram(o),r.validateProgram(o),r.getProgramParameter(o,r.VALIDATE_STATUS)?o:(console.error("Error validating program ",r.getProgramInfoLog(o)),!1)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.createShader=r,exports.createProgram=e;
},{}],4:[function(require,module,exports) {
"use strict";var e=require("./shaders/vertexShader.glsl"),r=n(e),t=require("./shaders/fragmentShader.glsl"),a=n(t),o=require("./src/functions");function n(e){return e&&e.__esModule?e:{default:e}}var E=void 0,i=void 0,l=void 0;function A(){E=document.getElementById("canvas"),(i=E.getContext("webgl"))||console.log('Your browser dosen"t support webgl'),E.height=i.canvas.clientHeight,E.width=i.canvas.clientWidth,i.viewport(0,0,i.canvas.width,i.canvas.height);var e=(0,o.createShader)(i,i.VERTEX_SHADER,r.default),t=(0,o.createShader)(i,i.FRAGMENT_SHADER,a.default);l=(0,o.createProgram)(i,e,t);var n=i.createBuffer();i.bindBuffer(i.ARRAY_BUFFER,n);var A=[0,.5,0,.2,1.5,1,-.5,-.5,0,.2,.5,1,.5,-.5,0,.2,.5,1,0,-.5,.5,1,0,0,-.5,.5,.5,0,0,0,.5,.5,.5,0,0,0];i.bufferData(i.ARRAY_BUFFER,new Float32Array(A),i.STATIC_DRAW);var d=i.getAttribLocation(l,"vertexPosition");i.vertexAttribPointer(d,3,i.FLOAT,i.FALSE,6*Float32Array.BYTES_PER_ELEMENT,0*Float32Array.BYTES_PER_ELEMENT),i.enableVertexAttribArray(d);var c=i.getAttribLocation(l,"vertexColor");i.vertexAttribPointer(c,3,i.FLOAT,i.FALSE,6*Float32Array.BYTES_PER_ELEMENT,3*Float32Array.BYTES_PER_ELEMENT),i.enableVertexAttribArray(c),i.clearColor(.75,.9,1,1),i.clear(i.COLOR_BUFFER_BIT|i.DEPTH_BUFFER_BIT),i.enable(i.DEPTH_TEST),i.useProgram(l),i.drawArrays(i.TRIANGLES,0,A.length/6)}document.addEventListener("DOMContentLoaded",function(e){A()});
},{"./shaders/vertexShader.glsl":6,"./shaders/fragmentShader.glsl":7,"./src/functions":8}]},{},[4], null)
//# sourceMappingURL=triangle.778da6ed.map